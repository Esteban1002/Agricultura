// --------------------------------------
// 1. Definir lote y par√°metros
// --------------------------------------
var lote = Ghiglione;  // reemplaz√° por tu geometr√≠a real
Map.centerObject(lote, 13);

var fechaInicio = ee.Date('2010-10-01');
var fechaFin = ee.Date('2025-04-30');
var nombreLote = 'Ghiglione';

// --------------------------------------
// 2. Cargar Sentinel-2, calcular NDVI y filtrar
// --------------------------------------
var coleccion = ee.ImageCollection("COPERNICUS/S2_SR_HARMONIZED")
  .filterBounds(lote)
  .filterDate(fechaInicio, fechaFin)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  .map(function(img) {
    var ndvi = img.normalizedDifference(['B8', 'B4']).rename('NDVI');
    // Calcular percentiles p10 y p95 para enmascarar valores extremos
    var percentiles = ndvi.reduceRegion({
      reducer: ee.Reducer.percentile([10, 95]),
      geometry: lote,
      scale: 10,
      maxPixels: 1e9
    });
    var p10 = percentiles.getNumber('NDVI_p10');
    var p95 = percentiles.getNumber('NDVI_p95');
    ndvi = ndvi.updateMask(ndvi.gte(p10).and(ndvi.lte(p95)));
    return img.addBands(ndvi).set('a√±o', img.date().get('year'));
  });

// --------------------------------------
// 3. NDVI promedio por a√±o
// --------------------------------------
var a√±os = ee.List.sequence(2010, 2025);
var ndviPorA√±o = a√±os.map(function(a√±o) {
  var imgPorA√±o = coleccion
    .filter(ee.Filter.eq('a√±o', a√±o))
    .select('NDVI')
    .mean()
    .set('a√±o', a√±o);
  return imgPorA√±o;
});
var coleccionNDVI = ee.ImageCollection(ndviPorA√±o);

// --------------------------------------
// 4. Crear panel con barra deslizadora y tama√±o compacto
// --------------------------------------
var a√±osLista = a√±os.getInfo();
var maxA√±os = 15;  // mostrar√° m√°s a√±os, se podr√° hacer scroll
var a√±osParaMostrar = a√±osLista.slice(-maxA√±os);

// Panel interno vertical con checkboxes
var panelCheckboxes = ui.Panel({
  layout: ui.Panel.Layout.flow('vertical')
});

var checkboxes = [];
a√±osParaMostrar.forEach(function(anio) {
  var cb = ui.Checkbox({
    label: anio.toString(),
    value: false,
    onChange: actualizarNDVI,
    style: {margin: '0 0 2px 0'}  // margen peque√±o
  });
  checkboxes.push(cb);
  panelCheckboxes.add(cb);
});

// Panel contenedor con altura fija (scroll vertical forzado)
var contenedorScroll = ui.Panel({
  widgets: [panelCheckboxes],
  layout: ui.Panel.Layout.flow('vertical'),
  style: {
    height: '100px',  // achic√°s el tama√±o visible
    width: '180px',
    backgroundColor: 'white',
    border: '1px solid lightgray',
    padding: '4px',
    // ‚ö†Ô∏è Este es el truco: aunque no est√© documentado, GEE lo acepta
    shown: true
  }
});

// Panel externo con t√≠tulo + scroll embebido
var checkboxPanel = ui.Panel({
  widgets: [
    ui.Label('Seleccion√° a√±os:', {
      fontWeight: 'bold',
      fontSize: '12px',
      margin: '0 0 4px 0'
    }),
    contenedorScroll
  ],
  style: {
    position: 'top-right',
    width: '200px',
    padding: '8px',
    backgroundColor: 'white',
    border: '1px solid gray'
  }
});

Map.add(checkboxPanel);

// --------------------------------------
// 5. Panel para exportaci√≥n
// --------------------------------------
var inputNombre = ui.Textbox({
  placeholder: 'Nombre archivo exportaci√≥n',
  style: {stretch: 'horizontal', margin: '8px 0'}
});

var botonExportar = ui.Button({
  label: 'üì§ Exportar Prescripci√≥n SHP',
  onClick: function() {
    if (!imagenExportacion) {
      print('‚ö†Ô∏è Seleccion√° al menos un a√±o para exportar.');
      return;
    }
    var zonas = imagenExportacion.reduceToVectors({
      geometry: lote,
      scale: 10,
      geometryType: 'polygon',
      labelProperty: 'clase',
      reducer: ee.Reducer.mode(),
      maxPixels: 1e13
    });

    var nombre = inputNombre.getValue() || 'Prescripcion_NDVI';
    Export.table.toDrive({
      collection: zonas,
      description: nombre,
      fileNamePrefix: nombre,
      fileFormat: 'SHP'
    });
    print('‚úÖ Exportaci√≥n iniciada con nombre:', nombre);
  }
});

var panelExportar = ui.Panel({
  widgets: [
    ui.Label('üíæ Exportaci√≥n Prescripci√≥n', {fontWeight: 'bold', fontSize: '16px'}),
    inputNombre,
    botonExportar
  ],
  style: {position: 'top-right', margin: '150px 20px 0 0', padding: '8px', width: '200px', backgroundColor: 'white', border: '1px solid gray'}
});
Map.add(panelExportar);

// --------------------------------------
// 6. Leyenda NDVI
// --------------------------------------
var leyendaPanel = null;
function mostrarLeyenda(paleta) {
  if (leyendaPanel) Map.remove(leyendaPanel);

  leyendaPanel = ui.Panel({
    style: {position: 'bottom-left', padding: '8px 15px', backgroundColor: 'white', border: '1px solid gray'}
  });

  leyendaPanel.add(ui.Label('NDVI promedio', {
    fontWeight: 'bold',
    fontSize: '16px',
    margin: '0 0 6px 0'
  }));

  var valores = ['0.0', '0.2', '0.4', '0.6', '0.8', '1.0'];
  for (var i = 0; i < paleta.length; i++) {
    var colorBox = ui.Label('', {
      backgroundColor: '#' + paleta[i],
      padding: '8px',
      margin: '0 4px 0 0'
    });
    var etiqueta = ui.Label(valores[i], { margin: '0 0 4px 0' });
    leyendaPanel.add(ui.Panel({
      widgets: [colorBox, etiqueta],
      layout: ui.Panel.Layout.Flow('horizontal')
    }));
  }
  Map.add(leyendaPanel);
}

// --------------------------------------
// 7. Funci√≥n para actualizar visualizaci√≥n NDVI seg√∫n a√±os seleccionados
// --------------------------------------
var imagenActual = null;
var imagenExportacion = null;

function actualizarNDVI() {
  Map.layers().reset();
  if (leyendaPanel) Map.remove(leyendaPanel);

  var seleccionados = checkboxes.filter(function(cb) {
    return cb.getValue();
  }).map(function(cb) {
    return parseInt(cb.getLabel());
  });

  if (seleccionados.length === 0) {
    imagenActual = null;
    imagenExportacion = null;
    return;
  }

  var imagenesSeleccionadas = coleccionNDVI.filter(ee.Filter.inList('a√±o', seleccionados));
  var promedio = imagenesSeleccionadas.mean().clip(lote);
  imagenActual = promedio;

  var stats = promedio.reduceRegion({
    reducer: ee.Reducer.percentile([10, 50, 90]),
    geometry: lote,
    scale: 10,
    maxPixels: 1e13
  });

  stats.evaluate(function(p) {
    var p10 = ee.Number(p['NDVI_p10']);
var p50 = ee.Number(p['NDVI_p50']);
var p90 = ee.Number(p['NDVI_p90']);

var visParams = {
  min: p10.getInfo(),
  max: p90.getInfo(),
  palette: ['ff0000', 'ff6600', 'ffff00', 'a8e05f', '4c9b1d', '006400']
};
Map.addLayer(promedio, visParams, 'NDVI Promedio Seleccionado');
mostrarLeyenda(visParams.palette);

var clasificado = promedio
  .where(promedio.lte(p10), 1)
  .where(promedio.gt(p10).and(promedio.lte(p50)), 2)
  .where(promedio.gt(p50), 3)
  .rename('clase');
imagenExportacion = clasificado.clip(lote);

  });
}
